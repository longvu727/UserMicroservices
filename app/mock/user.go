// Code generated by MockGen. DO NOT EDIT.
// Source: usermicroservices/app (interfaces: User)

// Package mockuserapp is a generated GoMock package.
package mockuserapp

import (
	reflect "reflect"
	app "usermicroservices/app"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/longvu727/FootballSquaresLibs/util/resources"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateDBUser mocks base method.
func (m *MockUser) CreateDBUser(arg0 app.CreateUserParams, arg1 *resources.Resources) (*app.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBUser", arg0, arg1)
	ret0, _ := ret[0].(*app.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBUser indicates an expected call of CreateDBUser.
func (mr *MockUserMockRecorder) CreateDBUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBUser", reflect.TypeOf((*MockUser)(nil).CreateDBUser), arg0, arg1)
}

// GetDBUser mocks base method.
func (m *MockUser) GetDBUser(arg0 app.GetUserParams, arg1 *resources.Resources) (*app.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUser", arg0, arg1)
	ret0, _ := ret[0].(*app.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBUser indicates an expected call of GetDBUser.
func (mr *MockUserMockRecorder) GetDBUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUser", reflect.TypeOf((*MockUser)(nil).GetDBUser), arg0, arg1)
}
